{ "gitOptions" : 
	[
		{"name": "discord local commits", "description": ["git reset --hard origin/<branch_name>"]},
		{"name": "unstage any staged changes for the given file(s)", "description": ["git reset -- <filePath>"]},
		{"name": "viewing unpushed git commits", "description": ["\"git log origin/master..HEAD\" or \"git diff origin/master..HEAD\""]},
		{"name": "pruning remote branches", "description": ["git remote prune origin"]},
		{"name":"Create a repo", "description": [
				"git init",
				"git config --local user.name \"Jace Manshadi\"",
				"git config -local user.email \"j_manshad@sfu.ca\"",
				"# <repo_name> >> README.md",
				"git add .",
				"git commit -m \" First commit\"",
				"git remote add origin *remote repository URL*",
				"git remote -v -> verifies new remote URL",
				"git push -u origin master"
			]
		},
		{"name":"Config git user name and email", "description": [
			"config singular repo",
			"git config --local user.name \"Jace Manshadi\"",
			"git config -local user.email \"j_manshad@sfu.ca\"",
			"config all repos",
			"git config --global user.name \"Jace Manshadi\"",
			"git config --global user.email \"j_manshad@sfu.ca\""
			]
		},
		{"name":"amending most recent commit message", "description": [
			"git commit --amend -m \"message\""]},
		{"name":"Git add repo url", "description": ["git remote add origin *remote repository URL*"]},
		{"name":"Verify git url", "description": ["git remote -v -> verifies new remote URL"]},
		{"name":"Git ignore file mode change", "description": ["git config --local core.fileMode false"]},
		{"name":"Set origin\\\\branch for upstream", "description": ["git branch --set-upstream-to origin/branch"]},
		{"name":"Determine which branches are tracking what", "description": ["git branch -vv"]},
		{"name":"Create branch", "description": [
			"create copy of current branch and call it feature1",
			"git branch feature1"
			]
		},
		{"name":"Switch branch", "description": [
			"switch to branch feature1",
			"git checkout feature1"
			]
		},
		{ "name": "Combo of above 2 commands", "description": [
			"combination of above 2 actions",
			"git checkout -b <new_branch_name>"
		]
		},
		{"name":"Switching to the previous branch", "description": [
			"checking out the previously checkout out branch",
			"\\`git checkout\\` - OR \\`git checkout @{-1}\\`"
		]},
		{"name":"Save and commit changes", "description": [
			"save local changes and push them to server",
			"git add -A",
			"gi commit -m \"what are the lastest changes\"",
			"git push"
		]
		},
		{"name":"Pull a single file from server repo", "description": [
			"git fetch -> will download all the recent changes, but it will not put it in your current checked out code (working area).",
			"git checkout origin/master -- path/to/file -> will checkout the particular file from the the downloaded changes (origin/master)."
		]},
		{"name":"discard any local commits", "description": [
			"git checkout master",
			"git reset --hard origin/master"
		]},
		{"name":"deleting branch", "description": [
			"git branch -D <local_branch>",
			"git push origin --delete <remote_branch>"
		]},
		{"name":"checking out PRs locally", "description": [
			"git fetch origin pull/1234/head:pr-1234"
		]}
	]
}
